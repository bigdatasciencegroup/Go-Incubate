---
version: '3'
services:
  mongo:
    container_name: mongo
    image: mongo
    ports:
      - "27017:27017"
    networks:
      - network1
    volumes:
      - "mongodata:/data/db" #Volume location on `Host:Container` machine   
  kafka:
    container_name: kafka
    image: spotify/kafka
    ports:
      - "2181:2181" #Zookeeper
      - "9092:9092" #Kafka
    networks:
      - network1
    environment:
      # - ADVERTISED_HOST=kafka #192.168.99.100 when using DockerToolbox
      - ADVERTISED_HOST=192.168.112.3
      - ADVERTISED_PORT=9092 #Kafka
      # - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      # - listeners=PLAINTEXT://0.0.0.0:9092
      - NUM_PARTITIONS=10 #Number of partitions for each topic in Kafka
  resttokafka:
    container_name: 'resttokafka'
    image: resttokafka
    ports:
      - "8080:8080"
    networks:
      - network1
    environment:
      - LISTENINGADDR=8080
      - DATABASENAME=dictionary
      - TOPICNAMEPOST=POSTdictionary
      # - TOPICNAMEGET= GETdictionary
      - SPEC_KAFKA_PORT=192.168.112.3:9092
      - SPEC_ZOOKEEPER_PORT=192.168.112.3:2181
      - SPEC_MONGO_PORT=mongo:27017

volumes:
  # Volume location on host machine is not specified. 
  # Docker will create and manage these named volumes in a part of the host filesystem 
  # which is managed by Docker (i.e., /var/lib/docker/volumes/ on Linux).
  mongodata: 
networks:
  network1:
    driver: bridge

# When docker-compose is run in Windows 10 with Hyper-V
# go to "localhost:8080/definition" to see the output.
# When docker-compose is run using Docker Toolbox
# go to "192.168.99.100:8080/definition" to see the output.
# "192.168.99.100" is the ip address of your docker-machine.
# Execute `$ docker-machine ip` to get ip address of your docker-machine.
