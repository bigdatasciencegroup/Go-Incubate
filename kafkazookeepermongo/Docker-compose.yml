version: '3'
services:

  #Mongo database
  mongo:
    image: mongo
    container_name: mongo
    networks:
      - dockerNet
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/data/db #Volume location on `Host:Container` machine   

  #Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper   
    restart: always
    networks:
      - dockerNet
    ports:
      - 2181:2181 #Zookeeper
    environment:
      - ZOOKEEPER_SERVER_ID=1
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_SERVERS=zookeeper:22888:23888

  #Kafka
  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    # restart: unless-stopped
    depends_on:
      - zookeeper
    networks:
      - dockerNet 
    ports:
      - 9092:9092 #Kafka broker - access port for external 
      # - 29092:29092 #Kafka broker - access port for internal
      # - "1099:1099" #JMX
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      # - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092, PLAINTEXT_HOST://localhost:9092   
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT_HOST://localhost:9092, PLAINTEXT://kafka:29092    
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_JMX_PORT=9991
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1

  kafdrop:
    image: thomsch98/kafdrop
    container_name: kafdrop
    depends_on:
      - zookeeper
      - kafka 
    networks:
      - dockerNet      
    ports:
      - 9010:9010
    environment:
      - ZK_HOSTS=zookeeper:2181
      - LISTEN=9010

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   expose:
  #     - "9090"
  #   ports:
  #     - "9090:9090"
  #   depends_on:
  #     - kafka
  #     - zookeeper
    # networks:
    #   - dockerNet

volumes:
  # Volume location on host machine is not specified. 
  # Docker will create and manage these named volumes in a part of the host filesystem 
  # which is managed by Docker (i.e., /var/lib/docker/volumes/ on Linux).
  mongo-data: 
networks:
  dockerNet:
    driver: bridge
