---
version: '3'
services:

  #Mongo database
  mongo:
    image: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    networks:
      - dockerNet
    volumes:
      - "mongo-data:/data/db" #Volume location on `Host:Container` machine   

  #Kafka0
  kafka0:
    image: ches/kafka
    container_name: kafka
    depends_on:
      - zookeeper 
    ports:
      - "9092:9092" #Kafka broker
    networks:
      - dockerNet
    environment:
      # - KAFKA_ADVERTISED_HOST_NAME=kafka
      # - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_BROKER_ID=0
      - KAFKA_NUM_PARTITIONS=5 #Number of log partitions per topic
      - ZOOKEEPER_IP=zookeeper
    volumes:
      - "kafka-data:/data" #Path where Kafka's data is stored 
      - "kafka-logs:/logs" #Path where Kafka's logs will be written   

  # #Kafka1
  # kafka1:
  #   image: ches/kafka
  #   container_name: kafka1
  #   depends_on:
  #     - zookeeper 
  #   ports:
  #     - "9093:9093" #Kafka broker
  #   networks:
  #     - dockerNet
  #   environment:
  #     - KAFKA_ADVERTISED_HOST_NAME=192.168.192.1
  #     - KAFKA_DEFAULT_REPLICATION_FACTOR=3
  #     - KAFKA_BROKER_ID=1
  #     # - KAFKA_NUM_PARTITIONS=5 #Number of log partitions per topic
  #     - ZOOKEEPER_IP=zookeeper
  #   # volumes:
  #   #   - "kafka-data:/data" #Path where Kafka's data is stored 
  #   #   - "kafka-logs:/logs" #Path where Kafka's logs will be written   

  #Zookeeper
  zookeeper:
    image: jplock/zookeeper
    container_name: zookeeper   
    restart: unless-stopped 
    ports:
      - "2181:2181" #Zookeeper
    networks:
      - dockerNet

volumes:
  # Volume location on host machine is not specified. 
  # Docker will create and manage these named volumes in a part of the host filesystem 
  # which is managed by Docker (i.e., /var/lib/docker/volumes/ on Linux).
  mongo-data: 
  kafka-data:
  kafka-logs:
networks:
  dockerNet:
    driver: bridge
